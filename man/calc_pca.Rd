% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_pca}
\alias{calc_pca}
\title{Performs a principal component analysis on given \emph{matrix} or \emph{time
series} using \code{RcppArmadillo}.}
\usage{
calc_pca(mat_rix)
}
\arguments{
\item{\code{mat_rix}}{A \emph{matrix} or a \emph{time series}.}
}
\value{
A \emph{matrix} of variable loadings (i.e. a matrix whose columns
  contain the eigenvectors).
}
\description{
Performs a principal component analysis on given \emph{matrix} or \emph{time
series} using \code{RcppArmadillo}.
}
\details{
The function \code{calc_pca()} performs a principal component
  analysis on a \emph{matrix} using \code{RcppArmadillo}.
}
\examples{
\dontrun{

# Select all the ETF symbols except "VXX" and "SVXY"
sym_bols <- NPE::etf_env$sym_bols
sym_bols <- sym_bols[!(sym_bols \%in\% c("VXX", "SVXY"))]
# Calculate ETF returns
re_turns <- NPE::etf_env$re_turns[, sym_bols]
re_turns <- na.omit(re_turns)
# Compare calc_pca() with standard prcomp()
all.equal(NPE::calc_pca(re_turns), 
  stats::prcomp(re_turns)$rotation, check.attributes=FALSE)
# Compare the speed of calc_pca() with R code
library(microbenchmark)
summary(microbenchmark(
  Rcpp=NPE::calc_pca(re_turns),
  Rcode=prcomp(re_turns),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
