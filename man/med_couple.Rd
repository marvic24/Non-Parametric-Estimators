% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{med_couple}
\alias{med_couple}
\title{Calculate the medcouple of a  \emph{vector} or a single-column \emph{time
series} using \code{Rcpp}.}
\usage{
med_couple(x, eps1 = 1e-14, eps2 = 1e-15)
}
\arguments{
\item{\code{vec_tor}}{A \emph{vector} or a single-column \emph{time series}.}

\item{\code{eps1}}{A \emph{double} Tolerance of the algorithm.}

\item{\code{eps2}}{A \emph{double} Tolerance of the algorithm..}
}
\value{
A single \emph{double} value representing medcouple of the vector.
}
\description{
Calculate the medcouple of a  \emph{vector} or a single-column \emph{time
series} using \code{Rcpp}.
}
\details{
The function \code{med_couple()} calculates the medcouple of the \emph{vector},
  using \code{Rcpp}. The function \code{med_couple()} is several times faster
  than \code{mc()} in package \code{robustbase}.
}
\examples{
\dontrun{
# Calculate VTI returns
re_turns <- na.omit(NPE::etf_env$re_turns[ ,"VTI"])
# Compare med_couple() with mc()
all.equal(drop(NPE::med_couple(re_turns)), 
  robustbase::mc(re_turns))
# Compare the speed of NPE with Robustbase code
library(microbenchmark)
summary(microbenchmark(
  Rcpp=NPE::med_couple(re_turns),
  robustbase=robustbase::mc(re_turns),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
