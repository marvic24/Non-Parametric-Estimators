% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{rolling_median}
\alias{rolling_median}
\title{Calculate the rolling median over a \emph{vector} or a single-column \emph{time series}
using \code{RcppArmadillo} and \code{RcppParallel}.}
\usage{
rolling_median(vec_tor, look_back)
}
\arguments{
\item{\code{vec_tor}}{A \emph{vector} or a single-column \emph{time series}.}

\item{\code{look_back}}{The length of look back interval, equal to the
number of elements of data used for calculating the median.}
}
\value{
A column \emph{vector} of the same length as the argument
  \code{vect_tor}.
}
\description{
Calculate the rolling median over a \emph{vector} or a single-column \emph{time series}
using \code{RcppArmadillo} and \code{RcppParallel}.
}
\details{
The function \code{rolling_median()} calculates a vector of
  rolling medians, over a \emph{vector} of data, using \emph{RcppArmadillo}
  and \emph{RcppParallel}. The function \code{rolling_median()} is faster
  than \code{roll::roll_median()} which uses \code{Rcpp}.
}
\examples{
\dontrun{
# Create a vector of random returns
re_turns <- rnorm(1e6)
# Compare rolling_median() with roll::roll_median()
all.equal(drop(NPE::rolling_median(re_turns, look_back=11)), 
  roll::roll_median(re_turns, width=11))
# Compare the speed of RcppArmadillo with R code
library(microbenchmark)
summary(microbenchmark(
  parallel_rcpp=NPE::rolling_median(re_turns),
  rcpp=roll::roll_median(re_turns),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
