% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{rolling_mad}
\alias{rolling_mad}
\title{Calculate the rolling median absolute deviation over a \emph{vector} or a
single-column \emph{time series} using \code{RcppArmadillo} and
\code{RcppParallel}.}
\usage{
rolling_mad(vec_tor, look_back)
}
\arguments{
\item{\code{vec_tor}}{A \emph{vector} or a single-column \emph{time series}.}

\item{\code{look_back}}{The length of look back interval, equal to the
number of elements of data used for calculating the median.}
}
\value{
A column \emph{vector} of the same length as the argument
  \code{vect_tor}.
}
\description{
Calculate the rolling median absolute deviation over a \emph{vector} or a
single-column \emph{time series} using \code{RcppArmadillo} and
\code{RcppParallel}.
}
\details{
The function \code{rolling_mad()} calculates a vector of
  rolling medians, over a \emph{vector} of data, using \emph{RcppArmadillo}
  and \emph{RcppParallel}.
}
\examples{
\dontrun{
# Calculate VTI returns
re_turns <- na.omit(NPE::etf_env$re_turns[ ,"VTI"])
# Define R function for the rolling MAD
rolling_madr <- function(x, look_back) {
  sapply(1:NROW(x), function(i) {
    NPE::calc_mad(x[max(1, i-look_back+1):i, ])
  })  # end sapply
}  # end rolling_madr
# Compare rolling_mad() with R code
all.equal(drop(NPE::rolling_mad(re_turns, 11))[-(1:10)],
  rolling_madr(re_turns, 11)[-(1:10)], check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
summary(microbenchmark(
  parallel_Rcpp=NPE::rolling_mad(re_turns, 11),
  Rcode=rolling_madr(re_turns, 11),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
