setwd("C:/Develop/capstone/Sumit_Sethi/NPE")
library(rutils)
install.packages(pkgs="C:/Develop/capstone/Sumit_Sethi/NPE", repos=NULL, type="source")
search()
library(NPE)
WRS::tsreg
vector_x <- rnorm(10)
vector_y <- rnorm(10)
NPE::theilSenEstimator(vector_x, vector_y)
WRS::tsreg(vector_x, vector_y)
foo <- WRS::tsreg(vector_x, vector_y)
foo$coef
WRS::tsreg(vector_x, vector_y, FALSE)$coef
WRS::tsreg(vector_x, vector_y, FALSE)
WRS::tsreg(vector_x, vector_y, FALSE)$coef
WRS::tsreg(vector_x, vector_y)$coef
all.equal(NPE::theilSenEstimator(vector_x, vector_y),
WRS::tsreg(vector_x, vector_y, FALSE)$coef, check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
Rcpp=NPE::theilSenEstimator(vector_x, vector_y),
Rcode=WRS::tsreg(vector_x, vector_y, FALSE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
install.packages("icsnp")
install.packages("ICSNP")
wilcox.test(re_turns)
re_turns <- zoo::coredata(na.omit(NPE::etf_env$re_turns[ ,"VTI"]))
wilcox.test(re_turns)
wilcox.test(re_turns, conf.int = TRUE)
?wilcox.test
all.equal(wilcox.test(re_turns, conf.int = TRUE)$estimate,
drop(NPE::hle(re_turns)), check.attributes=FALSE)
wilcox.test
foo <- ICSNP::hl.loc(re_turns)
re_turns <- zoo::coredata(na.omit(NPE::etf_env$re_turns[ ,"VTI"]))
foo <- ICSNP::hl.loc(re_turns)
tail(re_turns)
re_turns <- zoo::coredata(na.omit(NPE::etf_env$re_turns[ ,"VTI"]))
tail(re_turns)
re_turns <- drop(na.omit(NPE::etf_env$re_turns[ ,"VTI"]))
tail(re_turns)
foo <- ICSNP::hl.loc(re_turns)
class(re_turns)
re_turns <- as.numeric((na.omit(NPE::etf_env$re_turns[ ,"VTI"])))
foo <- ICSNP::hl.loc(re_turns)
foo
all.equal(wilcox.test(re_turns, conf.int = TRUE)$estimate,
drop(NPE::hle(re_turns)), check.attributes=FALSE)
all.equal(ICSNP::hl.loc(re_turns),
drop(NPE::hle(re_turns)), check.attributes=FALSE)
drop(NPE::hle(re_turns))
summary(microbenchmark(
Rcpp=NPE::hle(re_turns),
Rcode=wilcox.test(re_turns, conf.int = TRUE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
all.equal(NPE::theilSenEstimator(vector_x, vector_y),
WRS::tsreg(vector_x, vector_y, FALSE)$coef, check.attributes=FALSE)
sym_bols <- NPE::etf_env$sym_bols
sym_bols <- sym_bols[!(sym_bols %in% c("VXX", "SVXY""))]
re_turns <- NPE::etf_env$re_turns[, sym_bols]
re_turns <- na.omit(re_turns)
"
sym_bols <- NPE::etf_env$sym_bols
sym_bols <- sym_bols[!(sym_bols %in% c("VXX", "SVXY"))]
re_turns <- NPE::etf_env$re_turns[, sym_bols]
re_turns <- na.omit(re_turns)
dim(re_turns)
foo <- NPE::calc_pca(re_turns)
dim(foo)
?prcomp
foo <- stats::prcomp(re_turns)
dim(foo$rotation)
all.equal(NPE::calc_pca(re_turns),
stats::prcomp(re_turns)$rotation)
all.equal(NPE::calc_pca(re_turns),
stats::prcomp(re_turns)$rotation, check.attributes=FALSE)
summary(microbenchmark(
Rcpp=NPE::calc_pca(re_turns),
Rcode=prcomp(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
re_turns <- na.omit(NPE::etf_env$re_turns[ ,"VTI"])
all.equal(drop(NPE::med_couple(re_turns)),
robustbase::mc(re_turns))
summary(microbenchmark(
Rcpp=NPE::med_couple(re_turns),
robustbase=robustbase::mc(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
setwd("C:/Develop/capstone/Sumit_Sethi/NPE")
install.packages(pkgs="C:/Develop/capstone/Sumit_Sethi/NPE", repos=NULL, type="source")
