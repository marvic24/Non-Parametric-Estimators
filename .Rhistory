ls()
if (!require("rutils")) install.packages("rutils")
search()
setwd("C:/Develop/capstone/Sumit_Sethi/NPE")
install.packages(pkgs="C:/Develop/capstone/Sumit_Sethi/NPE", repos=NULL, type="source")
devtools::document()
install.packages(pkgs="C:/Develop/capstone/Sumit_Sethi/NPE", repos=NULL, type="source")
install.packages(pkgs="C:/Develop/capstone/Sumit_Sethi/NPE", repos=NULL, type="source")
re_turns <- na.omit(NPE::etf_env$re_turns[ ,"VTI"])
foo <- rolling_mad(re_turns)
all.equal(drop(NPE::rolling_median(re_turns, look_back=11))[-(1:10)],
roll::roll_median(re_turns, width=11)[-(1:10)], check.attributes=FALSE)
all.equal(zoo::coredata(NPE::rolling_median(re_turns, look_back=11))[-(1:10)],
roll::roll_median(re_turns, width=11)[-(1:10)], check.attributes=FALSE)
all.equal(drop(NPE::rolling_median(re_turns, look_back=11))[-(1:10)],
zoo::coredata(roll::roll_median(re_turns, width=11))[-(1:10)], check.attributes=FALSE)
all.equal(NPE::rolling_median(re_turns, look_back=11)[-(1:10)],
zoo::coredata(roll::roll_median(re_turns, width=11))[-(1:10)], check.attributes=FALSE)
summary(microbenchmark(
parallel_Rcpp=NPE::rolling_median(re_turns, look_back=11),
Rcpp=roll::roll_median(re_turns, width=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
library(microbenchmark)
summary(microbenchmark(
parallel_Rcpp=NPE::rolling_median(re_turns, look_back=11),
Rcpp=roll::roll_median(re_turns, width=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
parallel_Rcpp=NPE::rolling_median(re_turns, look_back=11),
Rcpp=roll::roll_median(re_turns, width=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
parallel_Rcpp=NPE::rolling_median(re_turns, look_back=111),
Rcpp=roll::roll_median(re_turns, width=111),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=rolling_median(re_turns, 30),
roll_library=roll_median(re_turns, 30),
times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=rolling_median(re_turns, 30),
roll=roll::roll_median(re_turns, 30),
times=10))[, c(1, 4, 5)]
re_turns <- na.omit(NPE::etf_env$re_turns[ ,"VTI"])
library(microbenchmark)
summary(microbenchmark(
parallel_Rcpp=NPE::rolling_median(re_turns, look_back=11),
roll=roll::roll_median(re_turns, width=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
rolling_mad(re_turns)
all.equal(median(re_turns), NPE::med_ian(re_turns), check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
Rcpp=NPE::med_ian(re_turns),
Rcode=median(re_turns),
times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=NPE::calc_mad(re_turns),
Rcode=mad(re_turns),
times=10))[, c(1, 4, 5)]
all.equal(NPE::calc_mad(re_turns), mad(re_turns), check.attributes=FALSE)
NPE::med_ian(re_turns)
NPE::calc_mad(re_turns)
all.equal(drop(NPE::calc_mad(re_turns)), mad(re_turns), check.attributes=FALSE)
drop(NPE::calc_mad(re_turns))
mad(re_turns)
all.equal(drop(NPE::calc_mad(re_turns)), mad(re_turns)/1.4826, check.attributes=FALSE)
summary(microbenchmark(
Rcpp=NPE::calc_mad(re_turns),
Rcode=mad(re_turns),
times=10))[, c(1, 4, 5)]
calc_skewr <- function(x) {
x <- (x-mean(x)); nr <- NROW(x);
nr*sum(x^3)/(var(x))^1.5/(nr-1)/(nr-2)
}  # end calc_skewr
all.equal(NPE::calc_skew(re_turns), calc_skewr(re_turns), check.attributes=FALSE)
skew_ness <- sapply(NPE::etf_env$sym_bols, function(sym_bol) {
NPE::calc_skew(na.omit(get(sym_bol, NPE::etf_env$re_turns)))
})  # end sapply
foo <- skew_ness
skew_ness <- sapply(NPE::etf_env$re_turns, function(re_turns) {
NPE::calc_skew(na.omit(re_turns))
})  # end sapply
all.equal(skew_ness, foo)
ma_d <- sapply(NPE::etf_env$re_turns, function(re_turns) {
NPE::calc_mad(na.omit(re_turns))
})  # end sapply
skewness_np <- sapply(NPE::etf_env$re_turns, function(re_turns) {
NPE::calc_skew(na.omit(re_turns), typ_e = "nonparametric")
})  # end sapply
# Scale the nonparametric skewness by the MAD
ma_d <- sapply(NPE::etf_env$re_turns, function(re_turns) {
NPE::calc_mad(na.omit(re_turns))
})  # end sapply
skewness_np <- skewness_np/ma_d
skewness_np
skew_ness
se_lect <- match(c("SVXY", "VXX"), names(skew_ness))
se_lect
skew_ness[-se_lect]
x11()
plot(x=skew_ness[-se_lect], y=skewness_np[-se_lect],
xlab="Pearson skewness", ylab="Nonparametric skewness")
foo <- lm(skew_ness[-se_lect] ~ skewness_np[-se_lect])
summary(foo)
foo <- lm(skewness_np[-se_lect] ~ skew_ness[-se_lect])
summary(foo)
all.equal(NPE::calc_skew(re_turns, typ_e = "pearson"),
calc_skewr(re_turns), check.attributes=FALSE)
summary(microbenchmark(
Rcpp=calc_skew(re_turns, typ_e = "pearson"),
Rcode=calc_skewr(re_turns),
times=10))[, c(1, 4, 5)]
all.equal(NPE::rolling_median(re_turns, look_back=11)[-(1:10)],
zoo::coredata(roll::roll_median(re_turns, width=11))[-(1:10)],
check.attributes=FALSE)
summary(microbenchmark(
parallel_Rcpp=NPE::rolling_median(re_turns, look_back=11),
roll=roll::roll_median(re_turns, width=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=rolling_median(re_turns, 30),
roll=roll::roll_median(re_turns, 30),
times=10))[, c(1, 4, 5)]
dim(re_turns)
rolling_madr <- function(x, look_back) {
sapply(1:NROW(x), function(i) {
NPE::calc_mad(x[max(1, i-look_back+1):i, ])
})  # end sapply
}  # end rolling_madr
foo <- rolling_madr(re_turns, 11)
tail(foo)
bar <- drop(NPE::rolling_mad(re_turns, 11))
tail(bar)
head(foo)
head(bar)
head(bar, 11)
head(foo, 11)
bar <- NPE::rolling_mad(re_turns, 11)
head(bar, 11)
all.equal(drop(NPE::rolling_mad(re_turns, 11))[-(1:10)],
rolling_madr(re_turns, 11)[-(1:10)],
check.attributes=FALSE)
summary(microbenchmark(
parallel_Rcpp=NPE::rolling_mad(re_turns, 11),
roll=rolling_madr(re_turns, 11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
rolling_skewr <- function(x, look_back) {
sapply(1:NROW(x), function(i) {
NPE::calc_skew(x[max(1, i-look_back+1):i, ])
})  # end sapply
}  # end rolling_skewr
foo <- rolling_skewr(re_turns, 11)
bar <- drop(NPE::rolling_skew(re_turns, 11))
all.equal(drop(NPE::rolling_skew(re_turns, 11))[-(1:10)],
rolling_skewr(re_turns, 11)[-(1:10)],
check.attributes=FALSE)
summary(microbenchmark(
parallel_Rcpp=NPE::rolling_skew(re_turns, 11),
Rcode=rolling_skewr(re_turns, 11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
detach("package:NPE")
q()
