if (!require("rutils")) install.packages("rutils")
setwd("C:/Develop/capstone/Sumit_Sethi/NPE")
install.packages(pkgs="C:/Develop/capstone/Sumit_Sethi/NPE", repos=NULL, type="source")
re_turns <- na.omit(NPE::etf_env$re_turns[ ,"XLF", drop=FALSE])
n_rows <- NROW(re_turns)
all.equal(NPE::rolling_median(re_turns, look_back=11)[-(1:10)],
zoo::coredata(roll::roll_median(re_turns, width=11))[-(1:10)],
check.attributes=FALSE)
summary(microbenchmark(
parallel_Rcpp=NPE::rolling_median(re_turns, look_back=11),
roll=roll::roll_median(re_turns, width=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
library(microbenchmark)
all.equal(NPE::rolling_median(re_turns, look_back=11)[-(1:10)],
zoo::coredata(roll::roll_median(re_turns, width=11))[-(1:10)],
check.attributes=FALSE)
summary(microbenchmark(
parallel_Rcpp=NPE::rolling_median(re_turns, look_back=11),
roll=roll::roll_median(re_turns, width=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
parallel_Rcpp=NPE::rolling_median(re_turns, look_back=111),
roll=roll::roll_median(re_turns, width=111),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
all.equal(drop(NPE::med_couple(re_turns)),
robustbase::mc(re_turns))
library(microbenchmark)
summary(microbenchmark(
Rcpp=NPE::med_couple(re_turns),
robustbase=robustbase::mc(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
sym_bols <- NPE::etf_env$sym_bols
sym_bols <- sym_bols[!(sym_bols %in% c("VXX", "SVXY"))]
re_turns <- NPE::etf_env$re_turns[, sym_bols]
re_turns <- na.omit(re_turns)
all.equal(NPE::calc_pca(re_turns),
stats::prcomp(re_turns)$rotation, check.attributes=FALSE)
summary(microbenchmark(
Rcpp=NPE::calc_pca(re_turns),
Rcode=prcomp(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
vector_x <- rnorm(10)
vector_y <- rnorm(10)
all.equal(NPE::theilSenEstimator(vector_x, vector_y),
WRS::tsreg(vector_x, vector_y, FALSE)$coef, check.attributes=FALSE)
summary(microbenchmark(
Rcpp=NPE::theilSenEstimator(vector_x, vector_y),
Rcode=WRS::tsreg(vector_x, vector_y, FALSE),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
x <- c(2.9, 3.0, 2.5, 2.6, 3.2) # normal subjects
y <- c(3.8, 2.7, 4.0, 2.4)      # with obstructive airway disease
z <- c(2.8, 3.4, 3.7, 2.2, 2.0) # with asbestosis
all.equal(kruskal.test(list(x, y, z))$p.value, drop(NPE::kruskalWalliceTest(list(x, y, z))))
summary(microbenchmark(
Rcpp=kruskalWalliceTest(list(x, y, z)),
Rcode=kruskal.test(list(x, y, z))$p.value,
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
search()
library(NPE)
summary(microbenchmark(
Rcpp=kruskalWalliceTest(list(x, y, z)),
Rcode=kruskal.test(list(x, y, z))$p.value,
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
ls()
rolling_theilsenr <- function(x, y, look_back) {
sapply(2:NROW(x), function(i) {
NPE::theilSenEstimator(x[max(1, i-look_back+1):i], y[max(1, i-look_back+1):i])
})  # end sapply
}
all.equal((NPE::rolling_theilsen(vector_x, vector_y, 5 ))[-(1),],
t(rolling_theilsenr(vector_x, vector_y, 5)), check.attributes=FALSE)
setwd("C:/Develop/capstone/Sumit_Sethi/NPE")
install.packages(pkgs="C:/Develop/capstone/Sumit_Sethi/NPE", repos=NULL, type="source")
q()
